# -*- coding: utf-8 -*-
######################################################################################
#
#    A part of Open HRMS Project <https://www.openhrms.com>
#
#    Copyright (C) 2022-TODAY Cybrosys Technologies(<https://www.cybrosys.com>).
#    Author: Cybrosys Techno Solutions (odoo@cybrosys.com)
#
#    This program is under the terms of the Odoo Proprietary License v1.0 (OPL-1)
#    It is forbidden to publish, distribute, sublicense, or sell copies of the Software
#    or modified copies of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
#    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#    DEALINGS IN THE SOFTWARE.
#
########################################################################################

from odoo import models, fields, _
from odoo.tools import html2plaintext


class HrPayslip(models.Model):
    _inherit = 'hr.payslip'

    leave_salary = fields.Boolean(string='Leave Salary',
                                  help="Check leave if salary should be paid "
                                       "for the employee if is on ;leave")

    def _get_payslip_lines(self):
        if not self.leave_salary:
            self.ensure_one()
            localdict = self.env.context.get('force_payslip_localdict', None)
            if localdict is None:
                localdict = self._get_localdict()
            rules_dict = localdict['rules'].dict
            result_rules_dict = localdict['result_rules'].dict

            blacklisted_rule_ids = self.env.context. \
                get('prevent_payslip_computation_line_ids', [])

            result = {}
            for rules in self.struct_id.rule_ids:
                if rules.code == 'LSB':
                    rules.active = False
                elif rules.code == 'LSG':
                    rules.active = False
                else:
                    rules.active = True

                for rule in sorted(rules.filtered(lambda x: x.active),
                                   key=lambda x: x.sequence):
                    if rule.id in blacklisted_rule_ids:
                        continue
                    localdict.update({
                        'result': None,
                        'result_qty': 1.0,
                        'result_rate': 100,
                        'result_name': False
                    })
                    if rule._satisfy_condition(localdict):
                        amount, qty, rate = rule._compute_rule(localdict)
                        # check if there is already a rule computed with that
                        # code
                        previous_amount = rule.code in localdict and \
                            localdict[rule.code] or 0.0
                        # set/overwrite the amount computed for this rule in
                        # the localdict
                        tot_rule = amount * qty * rate / 100.0
                        localdict[rule.code] = tot_rule
                        result_rules_dict[rule.code] = {'total': tot_rule,
                                                        'amount': amount,
                                                        'quantity': qty}
                        rules_dict[rule.code] = rule
                        # sum the amount for its salary category
                        localdict = rule.category_id._sum_salary_rule_category(
                            localdict, tot_rule - previous_amount)
                        # Retrieve the line name in the employee's lang
                        employee_lang = self.employee_id.sudo().address_home_id\
                            .lang
                        # This actually has an impact, don't remove this line
                        context = {'lang': employee_lang}

                        if localdict['result_name']:
                            rule_name = localdict['result_name']
                        elif rule.code in ['BASIC', 'GROSS', 'NET', 'DEDUCTION',
                                           'REIMBURSEMENT']:  # Generated by
                            # default_get (no xmlid)
                            # print(rule.code)
                            if rule.code == 'BASIC':  # Note: Crappy way to
                                # code this, but _(foo) is forbidden. Make a
                                # method in master to be overridden,
                                # using the structure code
                                if rule.name == "Double Holiday Pay":
                                    rule_name = _("Double Holiday Pay")
                                if rule.struct_id.name == "CP200: Employees " \
                                                          "13th Month":
                                    rule_name = _("Prorated end-of-year bonus")
                                else:
                                    rule_name = _('Basic Salary')
                            elif rule.code == "GROSS":
                                rule_name = _('Gross')
                            elif rule.code == "DEDUCTION":
                                rule_name = _('Deduction')
                            elif rule.code == "REIMBURSEMENT":
                                rule_name = _('Reimbursement')
                            elif rule.code == 'NET':
                                rule_name = _('Net Salary')
                        else:
                            rule_name = rule.with_context(
                                lang=employee_lang).name

                        # create/overwrite the rule in the temporary results
                        result[rule.code] = {
                            'sequence': rule.sequence,
                            'code': rule.code,
                            'name': rule_name,
                            'note': html2plaintext(rule.note),
                            'salary_rule_id': rule.id,
                            'contract_id': localdict['contract'].id,
                            'employee_id': localdict['employee'].id,
                            'amount': amount,
                            'quantity': qty,
                            'rate': rate,
                            'slip_id': self.id,
                        }
                rules.active = True
            return result.values()
        else:
            self.ensure_one()
            localdict = self.env.context.get('force_payslip_localdict', None)
            if localdict is None:
                localdict = self._get_localdict()
            rules_dict = localdict['rules'].dict
            result_rules_dict = localdict['result_rules'].dict
            blacklisted_rule_ids = self.env.context.get(
                'prevent_payslip_computation_line_ids', [])
            result = {}
            leave_sal_basic = self.env.ref(
                'ent_hr_vacation_mngmt.hr_salary_rule_leave_salary_basic')
            leave_sal_gross = self.env.ref(
                'ent_hr_vacation_mngmt.hr_salary_rule_leave_salary_gross')
            default_leave_salary = self.env[
                'ir.config_parameter'].sudo().get_param('default_leave_salary')
            for rules in self.struct_id.rule_ids:
                if default_leave_salary == '0':
                    if rules.code == 'LSB':

                        rules.active = True
                    elif rules.code == 'LSG':

                        rules.active = False
                    else:
                        rules.active = True
                else:
                    if rules.code == 'LSB':

                        rules.active = False
                    elif rules.code == 'LSG':
                        rules.active = True
                    else:
                        rules.active = True

                for rule in sorted(rules.filtered(lambda x: x.active),
                                   key=lambda x: x.sequence):
                    if rule.id in blacklisted_rule_ids:
                        continue
                    localdict.update({
                        'result': None,
                        'result_qty': 1.0,
                        'result_rate': 100,
                        'result_name': False
                    })
                    if rule._satisfy_condition(localdict):
                        amount, qty, rate = rule._compute_rule(localdict)
                        previous_amount = rule.code in localdict and localdict[
                            rule.code] or 0.0
                        tot_rule = amount * qty * rate / 100.0
                        localdict[rule.code] = tot_rule
                        result_rules_dict[rule.code] = {'total': tot_rule,
                                                        'amount': amount,
                                                        'quantity': qty}
                        rules_dict[rule.code] = rule
                        localdict = rule.category_id._sum_salary_rule_category(
                            localdict, tot_rule - previous_amount)
                        employee_lang = self.employee_id.sudo().address_home_id\
                            .lang
                        context = {'lang': employee_lang}
                        if localdict['result_name']:
                            rule_name = localdict['result_name']
                        elif rule.code in ['BASIC', 'GROSS', 'NET', 'DEDUCTION',
                                           'REIMBURSEMENT']:  # Generated by
                            # default_get (no xmlid)
                            if rule.code == 'BASIC':  # Note: Crappy way to
                                # code this, but _(foo) is forbidden. Make a
                                # method in master to be overridden,
                                # using the structure code
                                if rule.name == "Double Holiday Pay":
                                    rule_name = _("Double Holiday Pay")
                                if rule.struct_id.name == "CP200: Employees " \
                                                          "13th Month":
                                    rule_name = _("Prorated end-of-year bonus")
                                else:
                                    rule_name = _('Basic Salary')
                            elif rule.code == "GROSS":
                                rule_name = _('Gross')
                            elif rule.code == "DEDUCTION":
                                rule_name = _('Deduction')
                            elif rule.code == "REIMBURSEMENT":
                                rule_name = _('Reimbursement')
                            elif rule.code == 'NET':
                                rule_name = _('Net Salary')
                        else:
                            if rule.code == 'LSB':
                                rule_name = _('Leave Salary Basic')
                            elif rule.code == 'LSG':
                                rule_name = _('Leave Salary Gross')
                            else:
                                rule_name = rule.with_context(
                                    lang=employee_lang).name
                        # create/overwrite the rule in the temporary results
                        result[rule.code] = {
                            'sequence': rule.sequence,
                            'code': rule.code,
                            'name': rule_name,
                            'note': html2plaintext(rule.note),
                            'salary_rule_id': rule.id,
                            'contract_id': localdict['contract'].id,
                            'employee_id': localdict['employee'].id,
                            'amount': amount,
                            'quantity': qty,
                            'rate': rate,
                            'slip_id': self.id,
                        }
                rules.active = True
            return result.values()
